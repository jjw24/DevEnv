---
description: This rule enforces best practices for writing clean, idiomatic, and robust Python code, including PEP 8, type hints, and documentation.
globs:
  - "**/*.py"
---

# Python Conventions
- **Style:** Adhere strictly to PEP 8 for code style. Use `black` formatting and avoid trailing whitespace.
- **Style:** Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).
- **Type Hinting:** Use type hints for function signatures and variables to improve readability and static analysis.
- **Readability:** Prioritize clear, descriptive variable and function names.
- **Docstrings:** Use Google-style docstrings for all functions, classes, and methods.
- **Error Handling:** Use specific `try...except` blocks to handle expected exceptions. Avoid broad `except:` clauses.
- **Error Handling:** Handle errors and edge cases at the beginning of functions.
- **Error Handling:** Use early returns for error conditions to avoid deeply nested if statements.
- **Error Handling:** Place the happy path last in the function for improved readability.
- **Error Handling:** Avoid unnecessary else statements; use the if-return pattern instead.
- **Error Handling:** Use guard clauses to handle preconditions and invalid states early.
- **Error Handling:** Implement proper error logging and user-friendly error messages.
- **Dependency Management:** Ensure all dependencies are managed within a virtual environment.
- **Unit Tests** Do not add unit tests unless specifically asked to.
- **README.md** Do not add or update README.md unless specifically asked to.
- **API Client** If code is part of an API client or client wrapper, always first search for solution in the client's API documentation on the web.
